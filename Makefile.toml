[config]
default_to_workspace = false

# install postgresql cli to create database instance and superuser on MacOS
[tasks.install_postgresql_macos]
script = "brew install postgresql@13"
# start postgres server
[tasks.start_postgresql_macos]
script = "brew services start postgresql@13"

# isntall postgresql cli to create database instance and superuser on Linux
[tasks.install_postgresql_linux]
script = "sudo apt install postgresql postgresql-contrib"
# start postgres server
[tasks.start_postgresql_linux]
script = "sudo systemctl start postgresql && sudo systemctl enable postgresql"

# sqlx is a manager to connect to a postgres database. It does not create a server or users!
[tasks.install_sqlx_cli]
command = "cargo"
args = ["install", "sqlx-cli", "--no-default-features", "--features", "native-tls,postgres"]

[tasks.create_database]
dependencies = ["install_sqlx_cli"]
env = { DATABASE_URL = "postgres://postgres:password@localhost:5432/test" }
script = "echo 'y' | sqlx database drop && sqlx database create"

[tasks.wipe_migrations]
script = "rm -rf migrations"

[tasks.copy_migrations]
script = "chmod +x scripts/copy_migrations.sh && scripts/copy_migrations.sh"

[tasks.revert_database]
dependencies = ["install_sqlx_cli"]
env = { DATABASE_URL = "postgres://postgres:password@localhost:5432/test" }
script = "sqlx migrate revert"

[tasks.create_migration]
dependencies = ["install_sqlx_cli"]
env = { DATABASE_URL = "postgres://postgres:password@localhost:5432/test" }
command = "sqlx"
args = ["migrate", "add", "-r", "test"]

[tasks.migrate_database]
dependencies = ["install_sqlx_cli"]
env = { DATABASE_URL = "postgres://postgres:password@localhost:5432/test" }
script = "sqlx migrate run"

[tasks.reset_database]
dependencies = ["wipe_migrations", "create_database", "create_migration", "copy_migrations", "migrate_database"]

[tasks.update_database]
dependencies = ["create_database", "migrate_database"]

[tasks.clippy]
env = { DATABASE_URL = "postgres://postgres:password@localhost:5432/test" }
command = "cargo"
args = ["clippy", "${@}"]

[tasks.build_server]
script = "docker build -f docker/ca_server.dockerfile -t ca_backend/ca_server ."

[tasks.server_up]
dependencies = ["build_server"]
script = "docker compose -f ca_server.yml -p ca_server up"

[tasks.server_down]
script = "docker compose -f ca_server.yml -p ca_server down"